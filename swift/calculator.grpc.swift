//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: calculator.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate CalculatorClient, then call methods of this protocol to make API calls.
public protocol CalculatorClientProtocol: GRPCClient {
  func calculate(
    _ request: BinaryOperation,
    callOptions: CallOptions?
  ) -> UnaryCall<BinaryOperation, CalculationResult>

}

extension CalculatorClientProtocol {

  /// Unary call to Calculate
  ///
  /// - Parameters:
  ///   - request: Request to send to Calculate.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func calculate(
    _ request: BinaryOperation,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<BinaryOperation, CalculationResult> {
    return self.makeUnaryCall(
      path: "/Calculator/Calculate",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class CalculatorClient: CalculatorClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the Calculator service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

