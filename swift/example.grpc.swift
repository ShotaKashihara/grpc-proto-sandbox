//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: example.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Example_UserServiceClient, then call methods of this protocol to make API calls.
public protocol Example_UserServiceClientProtocol: GRPCClient {
  func addUser(
    _ request: Example_AddUserRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Example_AddUserRequest, Example_User>

  func listUsers(
    _ request: Example_ListUsersRequest,
    callOptions: CallOptions?,
    handler: @escaping (Example_User) -> Void
  ) -> ServerStreamingCall<Example_ListUsersRequest, Example_User>

  func listUsers2(
    _ request: Example_ListUsersRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Example_ListUsersRequest, Example_User>

}

extension Example_UserServiceClientProtocol {

  /// Unary call to AddUser
  ///
  /// - Parameters:
  ///   - request: Request to send to AddUser.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func addUser(
    _ request: Example_AddUserRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Example_AddUserRequest, Example_User> {
    return self.makeUnaryCall(
      path: "/example.UserService/AddUser",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Server streaming call to ListUsers
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUsers.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  public func listUsers(
    _ request: Example_ListUsersRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (Example_User) -> Void
  ) -> ServerStreamingCall<Example_ListUsersRequest, Example_User> {
    return self.makeServerStreamingCall(
      path: "/example.UserService/ListUsers",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      handler: handler
    )
  }

  /// Unary call to ListUsers2
  ///
  /// - Parameters:
  ///   - request: Request to send to ListUsers2.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func listUsers2(
    _ request: Example_ListUsersRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Example_ListUsersRequest, Example_User> {
    return self.makeUnaryCall(
      path: "/example.UserService/ListUsers2",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

public final class Example_UserServiceClient: Example_UserServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the example.UserService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
public protocol Example_UserServiceProvider: CallHandlerProvider {
  func addUser(request: Example_AddUserRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Example_User>
  func listUsers(request: Example_ListUsersRequest, context: StreamingResponseCallContext<Example_User>) -> EventLoopFuture<GRPCStatus>
  func listUsers2(request: Example_ListUsersRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Example_User>
}

extension Example_UserServiceProvider {
  public var serviceName: Substring { return "example.UserService" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  public func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "AddUser":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.addUser(request: request, context: context)
        }
      }

    case "ListUsers":
      return CallHandlerFactory.makeServerStreaming(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listUsers(request: request, context: context)
        }
      }

    case "ListUsers2":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.listUsers2(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

